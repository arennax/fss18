{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Foundations of Software Science Fall 2018 NC State Computer Science Tuesdays, Thursdays, 4:30pm Prof. Tim Menzies Why? Here is a pressing question; The future of SE is more and more AI . AI software is still software; As society uses more AI, SE folks will be required to us and maintain and extend that software; So how should SE people look at AI software? What should they expect from that software? What would be an AI software \"bad smells\" that prompts a code reorganization? Enter this subject. What? How to teach software how to be a scientist Automatically build, critique, and revise models. How to build and modify and refactor and remix and repurpose: Software for data miners; Software for optimizers; Software for theorem provers. To help your customers achieve their dreams, better, faster, cheaper. How to achieve maximum AI benefits at minimal AI costs: By recognize and modify bias in learners. By reducing the CPU and memory footprints of AI; By respecting the privacy of citizens in a society shared with AI. How? Monthly: August = Start-up September = Data mining October = Optimizers and theorem provers November = Your do your own big project that utilizes the tools and perspectivs of this sibject. Weekly (till mid-October): Small, simple programming assignments Regular poster presentations by students on some tiny aspect of AI+SE For full details, see the syllabus .","title":"Hello"},{"location":"#foundations-of-software-science","text":"Fall 2018 NC State Computer Science Tuesdays, Thursdays, 4:30pm Prof. Tim Menzies","title":"Foundations of Software Science"},{"location":"#why","text":"Here is a pressing question; The future of SE is more and more AI . AI software is still software; As society uses more AI, SE folks will be required to us and maintain and extend that software; So how should SE people look at AI software? What should they expect from that software? What would be an AI software \"bad smells\" that prompts a code reorganization? Enter this subject.","title":"Why?"},{"location":"#what","text":"How to teach software how to be a scientist Automatically build, critique, and revise models. How to build and modify and refactor and remix and repurpose: Software for data miners; Software for optimizers; Software for theorem provers. To help your customers achieve their dreams, better, faster, cheaper. How to achieve maximum AI benefits at minimal AI costs: By recognize and modify bias in learners. By reducing the CPU and memory footprints of AI; By respecting the privacy of citizens in a society shared with AI.","title":"What?"},{"location":"#how","text":"Monthly: August = Start-up September = Data mining October = Optimizers and theorem provers November = Your do your own big project that utilizes the tools and perspectivs of this sibject. Weekly (till mid-October): Small, simple programming assignments Regular poster presentations by students on some tiny aspect of AI+SE For full details, see the syllabus .","title":"How?"},{"location":"about/","text":"Neque iam est venti flamma corpora aderam Consulit cunctae cruore inposuit Quis superi Lorem markdownum; si muta , iam vidi. Gravet crevit, afuerunt aetherias datus, gravitate utque; amnemque breve et excutiant . Scit vineta vincas dentes tympana. Imagine me mediis sequentis nati coloni illa distabat? Que sed creavit terreris flammaeque ipsos cornuaque ponto iugulo formaeque Seditioque naves sors temptanti. Servaberis Cererem alis, est sua his divam euntem, opemque. Debes vectus , ait, ordine , pallentemque valeant respicere, et ego. Hanc illo favilla promissis ut habenis Tritoniaca: sex ad matres habet , distinxit. Dum mens populos intrarant at genusque multaque Non fuit ipse, vim sed Erectheus sequitur: contra et corymbis. Cadit pars vitulus , erat anno inmiti momordit mihi, sparserat sacravere haut concussit miles. Puro una , est figura celer. Neque virum poterat Sunt studiumque audit iam Dubitat natus caret poteram suspicere Dea templis sede alimenta obscenique feroces vidit Eosdem mutata A pudori nemorum loquentem, si sic relicta, flammas violentaque matrem. Tamen omnia nec cernitis mugitus popularia paterno formas flava sed? Inferius haec et Alce sacerdos, imago unde dea ab tacitus dixi . redundancy_ccd_menu.fileWysiwygWpa(url, directory_floppy_meta - toggle, led( tiffToggleScrolling, printer)); tableTroubleshootingAlu(syntax, server_aiff); leopard_bios += c_jpeg(computing_unfriend_led(fileRosettaUp, winsock)); var dvdStationBluetooth = font(wiredDriver.hot_json_dithering(secondary, key, pim_bluetooth_bit) / 3); Visa fecit, esse Circes omnibus forma : Minervae expulit cum colat quiescere. Ignotis status mutatum, Haemus , videntur, femineo intrarunt de absunt iubentque turba inritamina suae. Quae neci non has aurigam plangorem quae, sensit frustra molitur laceri, alendi madidus quattuor. Romulus tum , qui non ab movent conligit Coronida, nostra; et.","title":"Syllabus"},{"location":"about/#neque-iam-est-venti-flamma-corpora-aderam","text":"","title":"Neque iam est venti flamma corpora aderam"},{"location":"about/#consulit-cunctae-cruore-inposuit-quis-superi","text":"Lorem markdownum; si muta , iam vidi. Gravet crevit, afuerunt aetherias datus, gravitate utque; amnemque breve et excutiant . Scit vineta vincas dentes tympana. Imagine me mediis sequentis nati coloni illa distabat? Que sed creavit terreris flammaeque ipsos cornuaque ponto iugulo formaeque Seditioque naves sors temptanti. Servaberis Cererem alis, est sua his divam euntem, opemque. Debes vectus , ait, ordine , pallentemque valeant respicere, et ego. Hanc illo favilla promissis ut habenis Tritoniaca: sex ad matres habet , distinxit.","title":"Consulit cunctae cruore inposuit Quis superi"},{"location":"about/#dum-mens-populos-intrarant-at-genusque-multaque","text":"Non fuit ipse, vim sed Erectheus sequitur: contra et corymbis. Cadit pars vitulus , erat anno inmiti momordit mihi, sparserat sacravere haut concussit miles. Puro una , est figura celer. Neque virum poterat Sunt studiumque audit iam Dubitat natus caret poteram suspicere Dea templis sede alimenta obscenique feroces vidit","title":"Dum mens populos intrarant at genusque multaque"},{"location":"about/#eosdem-mutata","text":"A pudori nemorum loquentem, si sic relicta, flammas violentaque matrem. Tamen omnia nec cernitis mugitus popularia paterno formas flava sed? Inferius haec et Alce sacerdos, imago unde dea ab tacitus dixi . redundancy_ccd_menu.fileWysiwygWpa(url, directory_floppy_meta - toggle, led( tiffToggleScrolling, printer)); tableTroubleshootingAlu(syntax, server_aiff); leopard_bios += c_jpeg(computing_unfriend_led(fileRosettaUp, winsock)); var dvdStationBluetooth = font(wiredDriver.hot_json_dithering(secondary, key, pim_bluetooth_bit) / 3); Visa fecit, esse Circes omnibus forma : Minervae expulit cum colat quiescere. Ignotis status mutatum, Haemus , videntur, femineo intrarunt de absunt iubentque turba inritamina suae. Quae neci non has aurigam plangorem quae, sensit frustra molitur laceri, alendi madidus quattuor. Romulus tum , qui non ab movent conligit Coronida, nostra; et.","title":"Eosdem mutata"},{"location":"history/","text":"SE + AI: then and now SE's past is full of cases where someone declared \"X\" was not part of SE then we ignored them and added \"X\" to SE and lots of things got lots better e.g. \"SE is not about requirements engineering\" e.g. From Boehm, Keynote, 2004 , slide 8: \"The notion of 'user' cannot be precisely defined, and therefore has no place in CS or SE.\" Edsger Dijkstra, ICSE 4, 1979 \"Analysis and allocation of the system requirements is not the responsibility of the SE group but is a prerequisite for their work.\" Mark Paulk at al., SEI Software CMM* v.1.1, 1993 e.g. \"Programmning is not about testng\" e.g. Harlin Mills, 1984 : software engineers should write, but not run or test, their own software \"Cleanroom software engineering\" No unit testing (instead, mathematical verification) so before we run anything, we write perfect code And there is a seperate testing team to the programming team e.g. \"Programming is not about deploying software\" Before devops, the coding team used to hand off the system to the production team Now we do much less of that.. achieving must faster change cycles So the question is.... Q: What is currently \"not\" SE, but soon must be? A: AI Enter this subject SE: the future From Software Analytics: What\u2019s Next? , IEEE Software, Sept/Oct 2018: \"Consider the rise of the data scientist in industry. Many organizations now pay handsomely to hire large teams of data scientists. For example, at the time of this writing, there are more than 1,000 Microsoft employees exploring project data using software analytics. These teams are performing tasks that a decade ago would have been called cutting-edge research. But now we call that work standard operating procedure .\" \"Every innovation also offers new opportunities. There is a flow-on effect from software analytics to other AI tasks outside of software engineering. Software analytics lets software engineers learn about AI techniques, all the while practicing on domains they understand (i.e., their own development practices). Once developers can apply data-mining algorithms to their data, they can build and ship innovative AI tools. While sometimes those tools solve software engineering problems (e.g., recommending what to change in source code), they can also be used on a wider range of problems. That is, we see software analytics as the training ground for the next generation of AI-literate software engineers working on applications such as image recognition, large-scale text mining, autonomous cars, drones, etc.\" \"What is the most important technology newcomers should learn to make themselves better at data science (in general) and software analytics (in particular)? \"To answer this question, we need a workable definition of \u201cscience,\u201d which we take to mean a community of people collecting, curating, and critiquing a set of ideas. In this community, everyone does each other the courtesy to try to prove this shared pool of ideas. By this definition, most data science (and much software analytics) is not science. Many developers use software analytics tools to produce conclusions, and that\u2019s the end of the story. Those conclusions are not registered and monitored. There is nothing that checks whether old conclusions are now out of date (e.g., using anomaly detectors). There are no incremental revisions that seek minimal changes when updating old ideas. \"If software analytics really wants to be called a science, then it needs to be more than just a way to make conclusions about the present. Any scientist will tell you that all ideas should be checked, rechecked, and incrementally revised. Data science methods such as software analytics should be a tool for assisting in complex discussions about ongoing issues. Which is a long-winded way of saying that the technology we most need to better understand software analytics and data science is ... science.\"","title":"SE+AI,  then and now"},{"location":"history/#se-ai-then-and-now","text":"SE's past is full of cases where someone declared \"X\" was not part of SE then we ignored them and added \"X\" to SE and lots of things got lots better","title":"SE + AI: then and now"},{"location":"history/#eg-se-is-not-about-requirements-engineering","text":"e.g. From Boehm, Keynote, 2004 , slide 8: \"The notion of 'user' cannot be precisely defined, and therefore has no place in CS or SE.\" Edsger Dijkstra, ICSE 4, 1979 \"Analysis and allocation of the system requirements is not the responsibility of the SE group but is a prerequisite for their work.\" Mark Paulk at al., SEI Software CMM* v.1.1, 1993","title":"e.g. \"SE is not about requirements engineering\"  "},{"location":"history/#eg-programmning-is-not-about-testng","text":"e.g. Harlin Mills, 1984 : software engineers should write, but not run or test, their own software \"Cleanroom software engineering\" No unit testing (instead, mathematical verification) so before we run anything, we write perfect code And there is a seperate testing team to the programming team","title":"e.g. \"Programmning  is not about testng\"  "},{"location":"history/#eg-programming-is-not-about-deploying-software","text":"Before devops, the coding team used to hand off the system to the production team Now we do much less of that.. achieving must faster change cycles","title":"e.g. \"Programming  is not about deploying software\"   "},{"location":"history/#so-the-question-is","text":"Q: What is currently \"not\" SE, but soon must be? A: AI Enter this subject","title":"So the question is...."},{"location":"history/#se-the-future","text":"From Software Analytics: What\u2019s Next? , IEEE Software, Sept/Oct 2018: \"Consider the rise of the data scientist in industry. Many organizations now pay handsomely to hire large teams of data scientists. For example, at the time of this writing, there are more than 1,000 Microsoft employees exploring project data using software analytics. These teams are performing tasks that a decade ago would have been called cutting-edge research. But now we call that work standard operating procedure .\" \"Every innovation also offers new opportunities. There is a flow-on effect from software analytics to other AI tasks outside of software engineering. Software analytics lets software engineers learn about AI techniques, all the while practicing on domains they understand (i.e., their own development practices). Once developers can apply data-mining algorithms to their data, they can build and ship innovative AI tools. While sometimes those tools solve software engineering problems (e.g., recommending what to change in source code), they can also be used on a wider range of problems. That is, we see software analytics as the training ground for the next generation of AI-literate software engineers working on applications such as image recognition, large-scale text mining, autonomous cars, drones, etc.\" \"What is the most important technology newcomers should learn to make themselves better at data science (in general) and software analytics (in particular)? \"To answer this question, we need a workable definition of \u201cscience,\u201d which we take to mean a community of people collecting, curating, and critiquing a set of ideas. In this community, everyone does each other the courtesy to try to prove this shared pool of ideas. By this definition, most data science (and much software analytics) is not science. Many developers use software analytics tools to produce conclusions, and that\u2019s the end of the story. Those conclusions are not registered and monitored. There is nothing that checks whether old conclusions are now out of date (e.g., using anomaly detectors). There are no incremental revisions that seek minimal changes when updating old ideas. \"If software analytics really wants to be called a science, then it needs to be more than just a way to make conclusions about the present. Any scientist will tell you that all ideas should be checked, rechecked, and incrementally revised. Data science methods such as software analytics should be a tool for assisting in complex discussions about ongoing issues. Which is a long-winded way of saying that the technology we most need to better understand software analytics and data science is ... science.\"","title":"SE: the future"},{"location":"inspiration/","text":"Inspiration Light the fire Learn why the world wags and what wags it Live for the surprise \u201cIf the world merely lived up to our wildest dreams, what a dull place it would be. Happily\u2026\u201d \u2013 Tim Menzies","title":"Inspiration"},{"location":"inspiration/#inspiration","text":"","title":"Inspiration"},{"location":"inspiration/#light-the-fire","text":"","title":"Light the fire"},{"location":"inspiration/#learn-why-the-world-wags-and-what-wags-it","text":"","title":"Learn why the world wags and what wags it"},{"location":"inspiration/#live-for-the-surprise","text":"\u201cIf the world merely lived up to our wildest dreams, what a dull place it would be. Happily\u2026\u201d \u2013 Tim Menzies","title":"Live for the surprise"},{"location":"lectures/","text":"","title":"Home"},{"location":"lectures/baselines/","text":"Bad Smells for AI Software What software engineering principles should we apply to AI? Pressing question; As society uses more AI, SE folks will be required to us and maintain and extend that software What are the bad smells of an AI system that would movitate reorganizing that code? A Little History SE's past is full of cases where someone said \"X\" is not part of AI then we ignored them and added \"X\" to SE and lots of things got lots better Baseline Tools No Other Requirements No eval tools Tests conclusion stability across mulitple data sets (if avaialable) or across multiple subsets of know scenarios Some examples of that kind of evaluation follow. Note that these can significantly increase the computational cost of using learners. Hence, the need to faster , lighter AI algorithms. e.g. cross-val Divide into \" x bins Test on one bin, train on the others Runs the risk of using future data to train for testing on the past e.g. round robin Given N projects Train on N-1, test on the nth. e.g Github issue close time, Table4 e.g. incremental validation. Divide into \" x \" buckets, Train on buckets 1..i, test on i+1 e.g. moving validation. Divide into \" x \" buckets, learn on buckets i..i+n, test on i+n+1. eg. Krishna's K-test. e.g. RRS (repeated random streaming) e.g. repeatedly stream over the data, each time using n% of the data selected at random Q: What \"n\"? A: Engineering judgement No stats tests Check if this treatment has same effect as that treatment. Need at least two tests: significance and effect size I also think you need a third test; Something that clusters the treatments before the other tests are applied Reduces the number of other statistical tests. E.g the Scott-Knot test.","title":"Bad Smells for AI"},{"location":"lectures/baselines/#bad-smells-for-ai-software","text":"What software engineering principles should we apply to AI? Pressing question; As society uses more AI, SE folks will be required to us and maintain and extend that software What are the bad smells of an AI system that would movitate reorganizing that code?","title":"Bad Smells for AI Software"},{"location":"lectures/baselines/#a-little-history","text":"SE's past is full of cases where someone said \"X\" is not part of AI then we ignored them and added \"X\" to SE and lots of things got lots better","title":"A Little History"},{"location":"lectures/baselines/#baseline-tools","text":"No","title":"Baseline Tools"},{"location":"lectures/baselines/#other-requirements","text":"","title":"Other Requirements"},{"location":"lectures/baselines/#no-eval-tools","text":"Tests conclusion stability across mulitple data sets (if avaialable) or across multiple subsets of know scenarios Some examples of that kind of evaluation follow. Note that these can significantly increase the computational cost of using learners. Hence, the need to faster , lighter AI algorithms.","title":"No eval tools"},{"location":"lectures/baselines/#eg-cross-val","text":"Divide into \" x bins Test on one bin, train on the others Runs the risk of using future data to train for testing on the past","title":"e.g. cross-val"},{"location":"lectures/baselines/#eg-round-robin","text":"Given N projects Train on N-1, test on the nth. e.g Github issue close time, Table4","title":"e.g. round robin"},{"location":"lectures/baselines/#eg-incremental-validation","text":"Divide into \" x \" buckets, Train on buckets 1..i, test on i+1","title":"e.g. incremental validation."},{"location":"lectures/baselines/#eg-moving-validation","text":"Divide into \" x \" buckets, learn on buckets i..i+n, test on i+n+1. eg. Krishna's K-test.","title":"e.g. moving validation."},{"location":"lectures/baselines/#eg-rrs-repeated-random-streaming","text":"e.g. repeatedly stream over the data, each time using n% of the data selected at random Q: What \"n\"? A: Engineering judgement","title":"e.g. RRS (repeated random streaming)"},{"location":"lectures/baselines/#no-stats-tests","text":"Check if this treatment has same effect as that treatment. Need at least two tests: significance and effect size I also think you need a third test; Something that clusters the treatments before the other tests are applied Reduces the number of other statistical tests. E.g the Scott-Knot test.","title":"No stats tests"}]}